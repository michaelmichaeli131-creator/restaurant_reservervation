<% layout("_layout", it) %>
<main class="container">
  <header class="page-header">
    <h1><%= it.restaurant.name %></h1>
    <p class="muted"><%= it.restaurant.city %> · <%= it.restaurant.address %></p>
    <% if (it.restaurant.phone) { %>
      <p class="muted">טלפון: <%= it.restaurant.phone %></p>
    <% } %>
  </header>

  <%
    const _photos = Array.isArray(it.restaurant.photos)
      ? it.restaurant.photos.map(p => (typeof p === 'string' ? p : p?.dataUrl)).filter(Boolean)
      : [];
    const PLACEHOLDER = (it.staticPrefix || "/static") + "/placeholder.png";
    const hero = _photos[0] || PLACEHOLDER;
  %>

  <!-- Hero -->
  <section class="hero card" aria-label="תמונה ראשית">
    <img src="<%= hero %>" alt="תמונה ראשית של <%= it.restaurant.name %>" class="hero-img"/>
  </section>

  <section class="card">
    <h2 style="margin-top:0">הזמנת מקום — שלב 1</h2>

    <% if (it.conflict) { %>
      <div class="alert warn" role="alert">
        אין זמינות בשעה שבחרת. בחר/י שעה אחרת מהרשימה להלן.
      </div>
    <% } %>

    <form id="reserve-form"
          class="form-grid"
          action="/restaurants/<%= it.restaurant.id %>/reserve"
          method="post" novalidate>
      <div class="form-row">
        <label for="date">תאריך</label>
        <input id="date" name="date" type="date" required value="<%= it.date || '' %>"/>
      </div>

      <div class="form-row time-row">
        <label for="time-display">שעה</label>
        <div class="time-dropdown-wrapper">
          <button type="button" class="time-dropdown-btn" id="time-display" aria-haspopup="listbox" aria-expanded="false">
            <%= it.time || "בחר שעה" %>
            <span class="arrow">▾</span>
          </button>
          <div class="time-options" id="time-options" hidden role="listbox"></div>
        </div>
        <input type="hidden" id="time" name="time" value="<%= it.time || '' %>"/>
        <small class="muted">שעות בתדירות 15 דקות (רק בתוך שעות הפתיחה של המסעדה)</small>
      </div>

      <div class="form-actions">
        <button type="submit" class="btn">המשך לשלב הבא</button>
        <button type="button" id="check-btn" class="btn secondary" data-rid="<%= it.restaurant.id %>">בדוק זמינות</button>
      </div>
    </form>
  </section>

  <section class="card" id="around-card" hidden>
    <h3 style="margin-top:0">שעות זמינות סביב המועד שבחרת (±2 שעות)</h3>
    <div id="around-slots" class="slots"></div>
    <small class="muted">לחיצה על שעה מעתיקה לשדה השעה.</small>
  </section>

  <% if (it.restaurant.description) { %>
    <section class="card">
      <h2 style="margin-top:0">על המסעדה</h2>
      <p><%= it.restaurant.description %></p>
    </section>
  <% } %>

  <% if (_photos.length > 0) { %>
    <section class="card">
      <h2 style="margin-top:0">תמונות</h2>
      <div class="photo-grid">
        <% _photos.forEach(src => { %>
          <img src="<%= src %>" alt="תמונה של המסעדה" loading="lazy"/>
        <% }) %>
      </div>
    </section>
  <% } %>
</main>

<script id="opening-hours-data" type="application/json">
<%- JSON.stringify(it.restaurant.weeklySchedule || it.restaurant.openingHours || it.restaurant.hours || it.restaurant.open_hours || null) %>
</script>

<script id="opening-windows-today" type="application/json">
<%- JSON.stringify(it.openingWindows || null) %>
</script>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const btn = document.getElementById("time-display");
  const opts = document.getElementById("time-options");
  const hiddenInput = document.getElementById("time");
  const form = document.getElementById("reserve-form");
  const dateInput = document.getElementById("date");

  let OPENING_HOURS = null;
  let OPENING_WINDOWS_TODAY = null;
  try { OPENING_HOURS = JSON.parse(document.getElementById("opening-hours-data")?.textContent || "null"); } catch {}
  try { OPENING_WINDOWS_TODAY = JSON.parse(document.getElementById("opening-windows-today")?.textContent || "null"); } catch {}

  console.debug("GT: opening-hours raw", OPENING_HOURS);
  console.debug("GT: opening-windows today", OPENING_WINDOWS_TODAY);

  // fallback: אם אין weekly אבל יש openingWindows, ניצור מהם טווח אחיד לכל הימים
  (function fallbackWeeklyFromWindows(){
    if (OPENING_HOURS == null && Array.isArray(OPENING_WINDOWS_TODAY) && OPENING_WINDOWS_TODAY.length) {
      const toHHMM = (s) => {
        const m = String(s || "").match(/^(\d{1,2}):(\d{2})$/);
        return m ? `${m[1].padStart(2,'0')}:${m[2]}` : null;
      };
      const arr = OPENING_WINDOWS_TODAY.map(w => ({
        open: toHHMM(w.open), close: toHHMM(w.close)
      })).filter(w => w.open && w.close);
      if (!arr.length) return;
      const same = arr.length === 1 ? arr[0] : arr;
      OPENING_HOURS = Object.fromEntries(Array.from({length:7},(_,i)=>[String(i),same]));
      console.debug("GT: built fallback weekly", OPENING_HOURS);
    }
  })();

  const pad2 = n => String(n).padStart(2,"0");
  const toMin = hhmm => {
    const m = (hhmm || "").match(/^(\d{1,2}):(\d{2})$/);
    if (!m) return null;
    return parseInt(m[1])*60 + parseInt(m[2]);
  };
  const fromMin = m => `${pad2(Math.floor(m/60))}:${pad2(m%60)}`;
  const roundToQuarterUp = m => m % 15 ? m + (15 - m % 15) : m;

  const normalizeDayRanges = def => {
    if (!def) return [];
    const arr = Array.isArray(def) ? def : [def];
    const out = [];
    for (const item of arr) {
      let s=null, e=null;
      if (typeof item === "string") {
        const m=item.match(/(\d{1,2}:\d{2})\s*[-–]\s*(\d{1,2}:\d{2})/);
        if(m){s=m[1];e=m[2];}
      } else if (item && typeof item === "object") {
        s=item.open||item.start||item.from;
        e=item.close||item.end||item.to;
      }
      const sm=toMin(s), em=toMin(e);
      if(sm!=null&&em!=null) out.push([sm,em]);
    }
    return out;
  };

  function getRangesForDate(dateStr) {
    const d = new Date(dateStr || Date.now());
    if (isNaN(d)) return null;

    if (!OPENING_HOURS && Array.isArray(OPENING_WINDOWS_TODAY)) {
      return OPENING_WINDOWS_TODAY.map(w=>[toMin(w.open),toMin(w.close)]);
    }
    if (!OPENING_HOURS) return null;

    const dow = d.getDay();
    const def = OPENING_HOURS[String(dow)] || null;
    return normalizeDayRanges(def);
  }

  function rebuildTimeOptionsFor(dateStr){
    opts.innerHTML="";
    const ranges=getRangesForDate(dateStr);
    const frag=document.createDocumentFragment();
    if(!ranges||!ranges.length){
      const d=document.createElement("div");
      d.textContent="אין שעות פתיחה ליום זה";
      d.className="time-option";
      d.setAttribute("aria-disabled","true");
      opts.appendChild(d);
      console.debug("GT: built time options",{date:dateStr,ranges:null,count:0,domCount:opts.children.length,hoursNull:!OPENING_HOURS});
      return;
    }
    let count=0;
    for(const [s,e] of ranges){
      for(let m=roundToQuarterUp(s);m<=e;m+=15){
        const t=fromMin(m);
        const el=document.createElement("div");
        el.className="time-option";
        el.dataset.value=t;
        el.textContent=t;
        frag.appendChild(el);
        count++;
      }
    }
    opts.appendChild(frag);
    console.debug("GT: built time options",{date:dateStr,ranges,count,domCount:opts.children.length,hoursNull:!OPENING_HOURS});
  }

  btn.addEventListener("click",()=>{
    opts.hidden=!opts.hidden;
    if(!opts.hidden) rebuildTimeOptionsFor(dateInput.value||new Date().toISOString().slice(0,10));
  });

  opts.addEventListener("click",e=>{
    const el=e.target.closest(".time-option");
    if(!el||el.getAttribute("aria-disabled")==="true")return;
    hiddenInput.value=el.dataset.value;
    btn.textContent=el.dataset.value+" ";
    const s=document.createElement("span");
    s.className="arrow";s.textContent="▾";btn.appendChild(s);
    opts.hidden=true;
  });

  dateInput.addEventListener("change",()=>rebuildTimeOptionsFor(dateInput.value));

  rebuildTimeOptionsFor(dateInput.value||new Date().toISOString().slice(0,10));
});
</script>

<style>
.container { max-width: 960px; margin: 24px auto; padding: 0 16px; }
.card { border: 1px solid #e2e8f0; border-radius: 10px; padding: 20px; margin-bottom: 24px; background: #fff; box-shadow: 0 1px 4px rgba(0,0,0,0.05); }
.hero-img { width: 100%; height: 260px; object-fit: cover; border-radius: 8px; border: 1px solid #eee; }
.time-option[aria-disabled="true"] { color:#aaa; cursor:default; }
</style>
