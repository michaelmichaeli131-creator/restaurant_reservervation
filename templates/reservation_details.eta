<% layout("_layout", it) %>
<main class="container">
  <header class="page-header">
    <h1>פרטי הזמנה — <%= it.restaurant.name %></h1>
    <p class="muted"><%= it.restaurant.city %> · <%= it.restaurant.address %></p>
    <% if (it.restaurant.phone) { %>
      <p class="muted">טלפון: <%= it.restaurant.phone %></p>
    <% } %>
  </header>

  <section class="card">
    <h2 style="margin-top:0">שלב 2 — מילוי פרטי לקוח</h2>

    <div class="summary">
      <div><strong>תאריך:</strong> <span id="sum-date"><%= it.date %></span></div>
      <div><strong>שעה:</strong> <span id="sum-time"><%= it.time %></span></div>
      <div><strong>מסעדה:</strong> <%= it.restaurant.name %></div>
    </div>

    <form id="details-form"
          class="form-grid"
          action="/restaurants/<%= it.restaurant.id %>/confirm"
          method="post" novalidate>
      <input type="hidden" name="date" value="<%= it.date %>"/>
      <input type="hidden" name="time" value="<%= it.time %>"/>

      <div class="form-row">
        <label for="name">שם מלא</label>
        <input id="name" name="name" type="text" required autocomplete="name" placeholder="שם פרטי ושם משפחה"/>
      </div>

      <div class="form-row">
        <label for="phone">נייד</label>
        <input id="phone" name="phone" type="tel" required inputmode="tel" placeholder="050-1234567"/>
      </div>

      <div class="form-row">
        <label for="email">אימייל</label>
        <input id="email" name="email" type="email" dir="ltr" inputmode="email" autocomplete="email"
               autocapitalize="off" spellcheck="false"
               placeholder="you@example.com" required
               pattern="[a-zA-Z0-9._%+\-]+@[a-zA-Z0-9.\-]+\.[a-zA-Z]{2,}"/>
        <small class="muted">נשלח אליך אישור הזמנה</small>
      </div>

      <% const cap = Math.max(1, Math.min(30, it.restaurant.capacity || 30)); %>
      <div class="form-row">
        <label for="people">מספר סועדים</label>
        <input id="people" name="people" type="number" min="1" max="<%= cap %>" step="1" value="<%= it.people || 2 %>" required/>
      </div>

      <div class="form-actions">
        <button type="submit" class="btn">אשר/י הזמנה</button>
        <a class="btn secondary" href="/restaurants/<%= it.restaurant.id %>?date=<%= encodeURIComponent(it.date) %>&time=<%= encodeURIComponent(it.time) %>">חזרה לשעה/תאריך</a>
      </div>
    </form>
  </section>

  <section class="card" id="conflict-card" hidden>
    <h3 style="margin-top:0">אין זמינות במועד שבחרת</h3>
    <p>בחר/י אחד מהזמנים הזמינים בקרבת השעה המבוקשת (עד ±2 שעות):</p>
    <div id="suggest-slots" class="slots"></div>
    <small class="muted">לחיצה על שעה תעדכן את השעה בטופס ותוכלו לשלוח שוב.</small>
  </section>

  <% if (it.restaurant.description) { %>
    <section class="card">
      <h2 style="margin-top:0">על המסעדה</h2>
      <p><%= it.restaurant.description %></p>
    </section>
  <% } %>
</main>

<script>
  // נרמול אימייל בצד לקוח (זהה ללוגיקה בצד שרת)
  const BIDI = /[\u200E\u200F\u202A-\u202E\u2066-\u2069]/g;
  const ZSP  = /[\s\u00A0\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]+/g;
  function normalizeEmail(s) {
    s = (s || "").toString();
    s = s.replace(BIDI, "");
    s = s.replace(/＠/g, "@").replace(/．/g, ".");
    s = s.replace(ZSP, " ").trim();
    s = s.replace(/^[<"'\s]+/, "").replace(/[>"'\s]+$/, "");
    return s.toLowerCase();
  }
  function isValidEmail(s) {
    return /^[a-z0-9._%+\-]+@[a-z0-9.\-]+\.[a-z]{2,}$/i.test(s);
  }

  function ensureValid() {
    const name  = document.getElementById('name').value.trim();
    const phone = document.getElementById('phone').value.trim();
    const email = normalizeEmail(document.getElementById('email').value);
    const people = Number(document.getElementById('people').value || '0');

    if (!name)   return "נא להזין שם";
    if (!phone)  return "נא להזין מספר נייד";
    if (!email || !isValidEmail(email)) return "נא להזין אימייל תקין";
    if (!Number.isFinite(people) || people < 1) return "מספר סועדים לא תקין";
    return null;
  }

  function renderSuggestions(slots) {
    const card = document.getElementById('conflict-card');
    const box  = document.getElementById('suggest-slots');
    box.innerHTML = '';
    if (Array.isArray(slots) && slots.length) {
      card.hidden = false;
      for (const t of slots.slice(0, 4)) {
        const b = document.createElement('button');
        b.type = 'button';
        b.className = 'slot';
        b.textContent = t;
        b.addEventListener('click', () => {
          document.querySelector('input[name="time"]').value = t;
          document.getElementById('sum-time').textContent = t;
          card.hidden = true;
        });
        box.appendChild(b);
      }
    } else {
      card.hidden = true;
    }
  }

  async function postJSON(url, payload) {
    const res = await fetch(url, {
      method: 'POST',
      headers: { 'Accept': 'text/html,application/json', 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
      redirect: 'follow'
    });
    const ctype = res.headers.get('content-type') || '';
    const text = await res.text();
    let data = null;
    if (ctype.includes('application/json')) { try { data = JSON.parse(text); } catch {} }
    return { ok: res.ok, status: res.status, data, text, ctype };
  }

  (function(){
    const emailEl = document.getElementById('email');
    emailEl.addEventListener('blur', () => {
      const n = normalizeEmail(emailEl.value);
      emailEl.value = n;
    });

    const form = document.getElementById('details-form');
    form.addEventListener('submit', async (ev) => {
      ev.preventDefault();

      const err = ensureValid();
      if (err) { alert(err); return; }

      const payload = {
        date:   form.querySelector('input[name="date"]').value,
        time:   form.querySelector('input[name="time"]').value,
        name:   form.querySelector('input[name="name"]').value.trim(),
        phone:  form.querySelector('input[name="phone"]').value.trim(),
        email:  normalizeEmail(form.querySelector('input[name="email"]').value),
        people: Number(form.querySelector('input[name="people"]').value || '0')
      };

      try {
        const url = form.getAttribute('action');
        const r = await postJSON(url, payload);

        if (r.ok && r.status === 200) {
          document.open(); document.write(r.text); document.close();
          return;
        }
        if (r.status === 409 && r.data && Array.isArray(r.data.suggestions)) {
          renderSuggestions(r.data.suggestions);
          alert('אין זמינות במועד שבחרת — בחר/י אחת מהחלופות למטה.');
          return;
        }
        if (r.status === 400 && r.data && r.data.error) {
          alert(r.data.error);
          return;
        }
        alert('אירעה שגיאה בעיבוד ההזמנה. נסו שוב.');
      } catch (e) {
        console.error(e);
        alert('שגיאה ברשת. נסו שוב.');
      }
    });
  })();
</script>

<style>
  .container{max-width:900px;margin:24px auto;padding:0 16px}
  .card{border:1px solid #eee;border-radius:12px;padding:16px;margin-bottom:18px}
  .muted{color:#777}
  .summary{display:flex;gap:16px;flex-wrap:wrap;margin-bottom:12px}
  .form-grid{display:grid;grid-template-columns:repeat(2,1fr);gap:12px}
  .form-row{display:flex;flex-direction:column}
  .form-actions{grid-column:1/-1;display:flex;gap:10px}
  .btn{background:#111;color:#fff;border:none;border-radius:8px;padding:8px 12px;cursor:pointer}
  .btn.secondary{background:#555}
  #conflict-card{border-color:#ffccc7}
  .slots{display:flex;gap:8px;flex-wrap:wrap}
  .slot{padding:6px 10px;border-radius:8px;border:1px solid #ddd;background:#fafafa;cursor:pointer}
  .slot:hover{background:#f0f0ff}
  @media (max-width:760px){.form-grid{grid-template-columns:1fr}}
</style>
