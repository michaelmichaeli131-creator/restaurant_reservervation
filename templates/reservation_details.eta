<% layout("_layout", it) %>
<main class="container">
  <header class="page-header">
    <h1>פרטי הזמנה — <%= it.restaurant.name %></h1>
    <p class="muted"><%= it.restaurant.city %> · <%= it.restaurant.address %></p>
    <% if (it.restaurant.phone) { %>
      <p class="muted">טלפון: <%= it.restaurant.phone %></p>
    <% } %>
  </header>

  <section class="card">
    <h2 style="margin-top:0">שלב 2 — פרטי לקוח</h2>

    <div class="summary">
      <div><strong>תאריך:</strong> <span id="sum-date"><%= it.date %></span></div>
      <div><strong>שעה:</strong> <span id="sum-time"><%= it.time %></span></div>
      <div><strong>מסעדה:</strong> <%= it.restaurant.name %></div>
    </div>

    <form id="details-form"
          class="form-grid"
          action="/restaurants/<%= it.restaurant.id %>/confirm"
          method="post" novalidate>
      <!-- חשוב: לשלוח את התאריך והשעה כחלק מהטופס, אך לא לאפשר למשתמש לשנותם -->
      <input type="hidden" name="date" value="<%= it.date %>"/>
      <input type="hidden" name="time" value="<%= it.time %>"/>
      <input type="hidden" name="people" value="<%= it.people %>"/>

      <div class="form-row">
        <label for="name">שם מלא</label>
        <input id="name" name="name" type="text" required autocomplete="name"
               placeholder="שם פרטי ושם משפחה"/>
      </div>

      <div class="form-row">
        <label for="phone">נייד</label>
        <input id="phone" name="phone" type="tel" required inputmode="tel"
               placeholder="050-1234567"/>
      </div>

      <div class="form-row">
        <label for="email">אימייל</label>
        <input id="email" name="email" type="email" dir="ltr" inputmode="email"
               autocomplete="email" autocapitalize="off" spellcheck="false"
               placeholder="you@example.com" required />
        <small class="muted">נשלח אליך אישור הזמנה</small>
      </div>

      <% 
        const cap = Math.max(1, Math.min(30, it.restaurant.capacity || 30));
      %>
      <div class="form-row">
        <label for="people">מספר סועדים</label>
        <input id="people" name="people" type="number" min="1" max="<%= cap %>"
               step="1" value="<%= it.people || 2 %>" required/>
      </div>

      <div class="form-actions">
        <button type="submit" class="btn">אשר/י הזמנה</button>
        <a class="btn secondary" href="/restaurants/<%= it.restaurant.id %>?date=<%= encodeURIComponent(it.date) %>&time=<%= encodeURIComponent(it.time) %>">חזרה לשינוי שעה/תאריך</a>
      </div>
    </form>
  </section>

  <section class="card" id="conflict-card" hidden>
    <h3 style="margin-top:0">אין זמינות במועד שבחרת</h3>
    <p>בחר/י אחד מהזמנים הזמינים בקרבת השעה המבוקשת (±2 שעות):</p>
    <div id="suggest-slots" class="slots"></div>
    <small class="muted">לחיצה על שעה תעדכן את השעה בטופס ותאפשר לשליחה מחדש.</small>
  </section>

  <% if (it.restaurant.description) { %>
    <section class="card">
      <h2 style="margin-top:0">על המסעדה</h2>
      <p><%= it.restaurant.description %></p>
    </section>
  <% } %>
</main>

<script>
  (function(){
    const BIDI = /[\u200E\u200F\u202A-\u202E\u2066-\u2069]/g;
    const ZSP  = /[\s\u00A0\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]+/g;
    function normalizeEmail(s) {
      s = (s || "").toString();
      s = s.replace(BIDI, "");
      s = s.replace(/＠/g, "@").replace(/．/g, ".");
      s = s.replace(ZSP, " ").trim();
      s = s.replace(/^[<"'\s]+/, "").replace(/[>"'\s]+$/, "");
      return s.toLowerCase();
    }
    const emailEl = document.getElementById('email');
    if (emailEl) {
      emailEl.addEventListener('blur', () => {
        emailEl.value = normalizeEmail(emailEl.value);
      });
    }
  })();

  (function () {
    const form = document.getElementById('details-form');
    if (!form) return;
    form.addEventListener('submit', function (ev) {
      try {
        if (!form.checkValidity()) return;
        if (form.hasAttribute('data-force-post')) return;

        ev.preventDefault();
        const sp = new URLSearchParams();
        const fd = new FormData(form);

        for (const [k, v] of fd.entries()) {
          if (typeof v === 'string') sp.append(k, v);
        }

        const to = new URL(form.getAttribute('action') || window.location.href, window.location.origin);
        to.search = sp.toString();
        window.location.assign(to.toString());
      } catch (e) {
        console.warn('[details-form] redirect-as-GET failed, falling back to POST:', e);
      }
    }, { passive: false });
  })();
</script>

<style>
  .container {
    max-width: 900px;
    margin: 24px auto;
    padding: 0 16px;
  }
  .card {
    border: 1px solid #eee;
    border-radius: 12px;
    padding: 16px;
    margin-bottom: 18px;
  }
  .muted { color: #777; }
  .summary {
    display: flex;
    gap: 16px;
    flex-wrap: wrap;
    margin-bottom: 12px;
  }
  .form-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
  }
  .form-row {
    display: flex;
    flex-direction: column;
  }
  .form-row label {
    margin-bottom: 4px;
    font-weight: 500;
  }
  .form-row input {
    padding: 8px 10px;
    border: 1px solid #ccc;
    border-radius: 6px;
    font-size: 1rem;
  }
  .form-actions {
    grid-column: 1 / -1;
    display: flex;
    gap: 10px;
    margin-top: 16px;
  }
  .btn {
    background: #111;
    color: #fff;
    border: none;
    border-radius: 8px;
    padding: 8px 12px;
    cursor: pointer;
  }
  .btn.secondary {
    background: #555;
  }
  #conflict-card {
    border-color: #ffccc7;
  }
  .slots {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
  }
  .slot {
    padding: 6px 10px;
    border-radius: 8px;
    border: 1px solid #ddd;
    background: #fafafa;
    cursor: pointer;
  }
  .slot:hover {
    background: #f0f0ff;
  }
  @media (max-width:760px) {
    .form-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
