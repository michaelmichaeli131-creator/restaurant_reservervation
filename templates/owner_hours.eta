<% layout("_layout", it) %>
<main class="container">
  <header class="page-header">
    <h1>הגדרת שעות פתיחה — <%= it.restaurant.name %></h1>
    <p class="muted"><%= it.restaurant.city %> · <%= it.restaurant.address %></p>
  </header>

  <section class="card">
    <form id="hours-form" class="form-grid" novalidate>
      <input type="hidden" id="rid" value="<%= it.restaurant.id %>"/>

      <div class="form-row">
        <label for="capacity">קיבולת מקסימלית בו־זמנית</label>
        <input id="capacity" type="number" min="1" step="1"
               value="<%= it.restaurant.capacity %>"/>
      </div>

      <div class="form-row">
        <label for="slot">גריד סלוטים (דקות)</label>
        <input id="slot" type="number" min="5" step="5"
               value="<%= it.restaurant.slotIntervalMinutes %>"/>
      </div>

      <div class="form-row">
        <label for="duration">משך ישיבה (דקות)</label>
        <input id="duration" type="number" min="30" step="15"
               value="<%= it.restaurant.serviceDurationMinutes %>"/>
      </div>

      <div class="form-row" style="grid-column:1/-1">
        <div class="tools">
          <button class="btn secondary" type="button" id="fill-week">העתק לכל הימים</button>
          <button class="btn secondary" type="button" id="reset-defaults">אפס לברירת מחדל</button>
          <span class="muted" style="margin-inline-start:8px">פורמט שעה: HH:mm</span>
        </div>
      </div>

      <div class="week-grid" style="grid-column:1/-1">
        <!-- ימולא דינמית -->
      </div>

      <div class="form-actions" style="grid-column:1/-1">
        <button type="submit" class="btn">שמור</button>
        <a class="btn secondary" href="/owner/restaurants">חזרה</a>
      </div>
    </form>
  </section>
</main>

<script id="existing-schedule" type="application/json">
<%- JSON.stringify(it.restaurant.weeklySchedule || null) %>
</script>

<script>
(function(){
  const pad2 = (n)=>String(n).padStart(2,"0");
  const isHHMM = (s)=>/^\d{1,2}:\d{2}$/.test(s);
  const normHHMM = (s)=>{
    s = String(s||"").trim();
    if (!s) return "";
    if (/^\d{1,2}\.\d{2}$/.test(s)) s = s.replace(".",":");
    const m = s.match(/^(\d{1,2}):(\d{2})$/);
    if (!m) return s;
    let h = Math.max(0, Math.min(23, +m[1]));
    let mi = Math.max(0, Math.min(59, +m[2]));
    return pad2(h)+":"+pad2(mi);
  };

  const DAYS = [
    {i:0, he:"א׳ (ראשון)"},
    {i:1, he:"ב׳ (שני)"},
    {i:2, he:"ג׳ (שלישי)"},
    {i:3, he:"ד׳ (רביעי)"},
    {i:4, he:"ה׳ (חמישי)"},
    {i:5, he:"ו׳ (שישי)"},
    {i:6, he:"ש׳ (שבת)"},
  ];

  const DEFAULTS = {
    0:{open:"10:00", close:"22:00"},
    1:{open:"10:00", close:"22:00"},
    2:{open:"10:00", close:"22:00"},
    3:{open:"10:00", close:"22:00"},
    4:{open:"10:00", close:"22:00"},
    5:{open:"10:00", close:"23:00"},
    6:{open:"10:00", close:"23:00"},
  };

  let schedule = null;
  try {
    schedule = JSON.parse(document.getElementById("existing-schedule").textContent || "null");
  } catch { schedule = null; }

  // אם אין schedule שמור — נתחיל מברירת מחדל
  schedule = schedule && typeof schedule === "object" ? schedule : DEFAULTS;

  const weekGrid = document.querySelector(".week-grid");

  function rowTemplate(dayIdx, label, value) {
    const closed = value == null;
    const open = !closed ? (value.open||"") : "";
    const close = !closed ? (value.close||"") : "";
    return `
      <div class="day-card" data-day="${dayIdx}">
        <div class="day-head">
          <strong>${label}</strong>
          <label class="chk">
            <input type="checkbox" class="closed" ${closed ? "checked":""}/>
            <span>סגור ביום זה</span>
          </label>
        </div>
        <div class="row">
          <div class="col">
            <label>פתיחה</label>
            <input class="open" type="time" value="${open}" ${closed?"disabled":""} placeholder="HH:mm"/>
          </div>
          <div class="col">
            <label>סגירה</label>
            <input class="close" type="time" value="${close}" ${closed?"disabled":""} placeholder="HH:mm"/>
          </div>
        </div>
      </div>
    `;
  }

  function render() {
    weekGrid.innerHTML = DAYS.map(d=>{
      const val = Object.prototype.hasOwnProperty.call(schedule, d.i) ? schedule[d.i] : null;
      return rowTemplate(d.i, d.he, val);
    }).join("");
    bindDayHandlers();
  }

  function bindDayHandlers() {
    weekGrid.querySelectorAll(".day-card").forEach(card=>{
      const chk = card.querySelector(".closed");
      const open = card.querySelector(".open");
      const close = card.querySelector(".close");
      chk.addEventListener("change", ()=>{
        const isClosed = chk.checked;
        open.disabled = close.disabled = isClosed;
        const day = +card.dataset.day;
        if (isClosed) {
          schedule[day] = null;
        } else {
          const prev = (schedule[day] && typeof schedule[day]==="object") ? schedule[day] : DEFAULTS[day] || {open:"10:00", close:"22:00"};
          schedule[day] = {
            open: normHHMM(open.value || prev.open || "10:00"),
            close: normHHMM(close.value || prev.close || "22:00"),
          };
          open.value = schedule[day].open;
          close.value = schedule[day].close;
        }
      });
      open.addEventListener("change", ()=>{
        const day = +card.dataset.day;
        if (!schedule[day]) schedule[day] = {open:"10:00", close:"22:00"};
        schedule[day].open = normHHMM(open.value);
        open.value = schedule[day].open;
      });
      close.addEventListener("change", ()=>{
        const day = +card.dataset.day;
        if (!schedule[day]) schedule[day] = {open:"10:00", close:"22:00"};
        schedule[day].close = normHHMM(close.value);
        close.value = schedule[day].close;
      });
    });
  }

  // כלים כלליים
  document.getElementById("fill-week").addEventListener("click", ()=>{
    // נשתמש בערך של ראשון (או היום הראשון שלא סגור) לכל השבוע
    let base = schedule[0];
    if (base == null) {
      // חפש יום פתוח אחר
      for (const d of DAYS) {
        if (schedule[d.i] != null) { base = schedule[d.i]; break; }
      }
      if (!base) base = {open:"10:00", close:"22:00"};
    }
    const copy = { open: normHHMM(base.open||"10:00"), close: normHHMM(base.close||"22:00") };
    const wantClosed = false;
    for (const d of DAYS) schedule[d.i] = wantClosed ? null : { ...copy };
    render();
  });

  document.getElementById("reset-defaults").addEventListener("click", ()=>{
    schedule = JSON.parse(JSON.stringify(DEFAULTS));
    render();
  });

  // שליחה
  document.getElementById("hours-form").addEventListener("submit", async (ev)=>{
    ev.preventDefault();

    // אימות בסיסי לשעות
    for (const d of DAYS) {
      const val = schedule[d.i];
      if (val == null) continue;
      if (!isHHMM(val.open) || !isHHMM(val.close)) {
        alert(`שגיאה ביום ${d.he}: אנא הזן שעות בפורמט HH:mm`);
        return;
      }
    }

    const rid = document.getElementById("rid").value;
    const capacity = Math.max(1, parseInt(document.getElementById("capacity").value||"30", 10));
    const slot = Math.max(5, parseInt(document.getElementById("slot").value||"15", 10));
    const duration = Math.max(30, parseInt(document.getElementById("duration").value||"120", 10));

    const payload = {
      weeklySchedule: schedule,
      capacity,
      slotIntervalMinutes: slot,
      serviceDurationMinutes: duration,
    };

    // שליחה כ-JSON — עדכן את הנתיב אם השתמשת באחר
    const resp = await fetch(`/owner/restaurants/${encodeURIComponent(rid)}/hours`, {
      method: "POST",
      headers: { "Accept":"application/json", "Content-Type":"application/json" },
      body: JSON.stringify(payload),
    });

    if (resp.ok) {
      alert("נשמר בהצלחה");
      location.href = `/restaurants/${encodeURIComponent(rid)}`;
    } else {
      const txt = await resp.text().catch(()=> "");
      alert("שגיאה בשמירה: " + (txt || resp.status));
    }
  });

  render();
})();
</script>

<style>
  .container{max-width:960px;margin:24px auto;padding:0 16px}
  .card{border:1px solid #e2e8f0;border-radius:10px;padding:20px;margin-bottom:24px;background:#fff;box-shadow:0 1px 4px rgba(0,0,0,0.05)}
  .form-grid{display:grid;grid-template-columns:repeat(3,1fr);gap:16px}
  .form-row{display:flex;flex-direction:column}
  .form-row label{margin-bottom:4px;color:#333;font-weight:500}
  .form-row input{padding:10px 12px;border:1px solid #cbd5e0;border-radius:6px;font-size:1rem}
  .tools{display:flex;gap:8px;align-items:center}
  .week-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(260px,1fr));gap:12px}
  .day-card{border:1px solid #e5e7eb;border-radius:8px;padding:12px;background:#fafafa}
  .day-head{display:flex;align-items:center;justify-content:space-between;margin-bottom:8px}
  .day-card .row{display:grid;grid-template-columns:1fr 1fr;gap:8px}
  .day-card .col{display:flex;flex-direction:column}
  .chk{display:flex;align-items:center;gap:6px;font-size:.9rem;color:#444}
  .form-actions{display:flex;gap:12px;margin-top:8px}
  .btn{padding:10px 16px;border:none;border-radius:6px;background-color:#667eea;color:#fff;cursor:pointer}
  .btn.secondary{background-color:#a0aec0}
  .muted{color:#6b7280}
  @media (max-width:860px){
    .form-grid{grid-template-columns:1fr}
  }
</style>
