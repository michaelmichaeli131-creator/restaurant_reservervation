<% layout("_layout", it) %>
<main class="container">
  <header class="page-header">
    <h1>הגדרת שעות פתיחה — <%= it.restaurant.name %></h1>
    <p class="muted"><%= it.restaurant.city %> · <%= it.restaurant.address %></p>
    <% if (it.saved) { %>
      <div class="alert" role="status">נשמר בהצלחה.</div>
    <% } %>
  </header>

  <section class="card">
    <form id="hours-form" class="form-grid" method="post" action="/owner/restaurants/<%= it.restaurant.id %>/hours" novalidate>
      <input type="hidden" id="rid" value="<%= it.restaurant.id %>"/>

      <div class="form-row">
        <label for="capacity">קיבולת מקסימלית בו־זמנית</label>
        <input id="capacity" name="capacity" type="number" min="1" step="1" value="<%= it.restaurant.capacity %>"/>
      </div>

      <div class="form-row">
        <label for="slot">גריד (דקות לכל סלוט)</label>
        <input id="slot" name="slotIntervalMinutes" type="number" min="5" step="5" value="<%= it.restaurant.slotIntervalMinutes %>"/>
      </div>

      <div class="form-row">
        <label for="duration">משך ישיבה (דקות)</label>
        <input id="duration" name="serviceDurationMinutes" type="number" min="30" step="15" value="<%= it.restaurant.serviceDurationMinutes %>"/>
      </div>

      <div class="form-row" style="grid-column:1/-1">
        <div class="tools">
          <button class="btn secondary" type="button" id="fill-week">העתק לכל השבוע</button>
          <button class="btn secondary" type="button" id="reset-defaults">אפס לברירת מחדל</button>
          <span class="muted" style="margin-inline-start:8px">פורמט שעה: HH:mm</span>
        </div>
      </div>

      <div class="week-grid" style="grid-column:1/-1"></div>

      <div class="form-actions" style="grid-column:1/-1">
        <button type="submit" class="btn">שמור</button>
        <a class="btn secondary" href="/owner/restaurants">חזרה</a>
      </div>
    </form>
  </section>
</main>

<script>
(function(){
  const pad2 = (n)=>String(n).padStart(2,"0");
  const normHHMM = (s)=>{
    s = String(s||"").trim();
    if (!s) return "";
    if (/^\d{1,2}\.\d{2}$/.test(s)) s = s.replace(".",":");
    const m = s.match(/^(\d{1,2}):(\d{2})$/);
    if (!m) return "";
    let h = Math.max(0, Math.min(23, +m[1]));
    let mi = Math.max(0, Math.min(59, +m[2]));
    return pad2(h)+":"+pad2(mi);
  };

  const DAYS = [
    { i:0, he:"ראשון" }, { i:1, he:"שני" }, { i:2, he:"שלישי" },
    { i:3, he:"רביעי" }, { i:4, he:"חמישי"}, { i:5, he:"שישי" },
    { i:6, he:"שבת" }
  ];

  // מצב התחלתי מהשרת:
  const initial = <%- JSON.stringify(it.weekly || {}, null, 2) %>;
  const schedule = {};
  for (const d of DAYS) {
    const v = initial[d.i] || null;
    schedule[d.i] = (v && v.open && v.close) ? { open:v.open, close:v.close } : null;
  }

  const weekGrid = document.querySelector(".week-grid");

  function rowTemplate(dayIdx, label, value){
    const closed = !value;
    const open  = !closed ? (value.open||"") : "";
    const close = !closed ? (value.close||"") : "";
    return `
      <div class="day-card" data-day="${dayIdx}">
        <div class="day-head">
          <strong>${label}</strong>
          <label class="chk">
            <input type="checkbox" class="enabled" name="d${dayIdx}_enabled" ${closed ? "" : "checked"}/>
            <span>פעיל</span>
          </label>
        </div>
        <div class="row">
          <div class="col">
            <label>פתיחה</label>
            <input class="open"  type="time" name="d${dayIdx}_open"  value="${open}"  ${closed?"disabled":""} step="900" placeholder="HH:mm"/>
          </div>
          <div class="col">
            <label>סגירה</label>
            <input class="close" type="time" name="d${dayIdx}_close" value="${close}" ${closed?"disabled":""} step="900" placeholder="HH:mm"/>
          </div>
        </div>
      </div>
    `;
  }

  function render() {
    weekGrid.innerHTML = DAYS.map(d=>{
      const val = Object.prototype.hasOwnProperty.call(schedule, d.i) ? schedule[d.i] : null;
      return rowTemplate(d.i, d.he, val);
    }).join("");

    // חבר אירועים:
    document.querySelectorAll(".day-card").forEach(card=>{
      const enabled = card.querySelector(".enabled");
      const open    = card.querySelector(".open");
      const close   = card.querySelector(".close");

      function setEnabled(on){
        enabled.checked = !!on;
        open.disabled = !on;
        close.disabled = !on;
        if (on) {
          const o = normHHMM(open.value) || "10:00";
          const c = normHHMM(close.value) || "22:00";
          schedule[+card.dataset.day] = { open:o, close:c };
          open.value = o; close.value = c;
        } else {
          schedule[+card.dataset.day] = null;
          open.value = ""; close.value = "";
        }
      }

      enabled.addEventListener("change", ()=> setEnabled(enabled.checked));

      // UX: הקלדה בשעת פתיחה/סגירה מפעילה אוטומטית את היום
      function autoEnableFromInput(inp){
        const v = normHHMM(inp.value);
        if (v) {
          if (!enabled.checked) setEnabled(true);
          const day = +card.dataset.day;
          if (!schedule[day]) schedule[day] = { open:"10:00", close:"22:00" };
          if (inp === open)  schedule[day].open  = v;
          if (inp === close) schedule[day].close = v;
          inp.value = v;
        }
      }
      open.addEventListener("input", ()=> autoEnableFromInput(open));
      close.addEventListener("input", ()=> autoEnableFromInput(close));

      open.addEventListener("change", ()=>{
        const day = +card.dataset.day;
        if (!schedule[day]) schedule[day] = {open:"10:00", close:"22:00"};
        schedule[day].open = normHHMM(open.value) || "10:00";
        open.value = schedule[day].open;
      });
      close.addEventListener("change", ()=>{
        const day = +card.dataset.day;
        if (!schedule[day]) schedule[day] = {open:"10:00", close:"22:00"};
        schedule[day].close = normHHMM(close.value) || "22:00";
        close.value = schedule[day].close;
      });
    });
  }

  // כלים:
  document.getElementById("fill-week").addEventListener("click", ()=>{
    let base = schedule[0];
    if (base == null) {
      for (const d of DAYS) { if (schedule[d.i] != null) { base = schedule[d.i]; break; } }
    }
    if (!base) base = { open:"10:00", close:"22:00" };
    const copy = { open: normHHMM(base.open)||"10:00", close: normHHMM(base.close)||"22:00" };
    for (const d of DAYS) schedule[d.i] = { ...copy };
    render();
  });

  document.getElementById("reset-defaults").addEventListener("click", ()=>{
    for (const d of DAYS) schedule[d.i] = null;
    render();
  });

  // שליחה: ודא ששום קלט קריטי לא נשאר disabled ושיש enabled=on לכל יום פעיל
  const form = document.getElementById("hours-form");
  form.addEventListener("submit", (ev)=>{
    // הסר disabled כדי שהדפדפן ישלח את הערכים
    document.querySelectorAll(".day-card").forEach(card=>{
      const enabled = card.querySelector(".enabled");
      const open    = card.querySelector(".open");
      const close   = card.querySelector(".close");
      if (enabled.checked) { open.disabled = false; close.disabled = false; }
      // הזרקת שדה מוסתר dX_enabled=on עבור ימים פעילים (ביטוח)
      const d = +card.dataset.day;
      const has = card.querySelector(`input[type="hidden"][name="d${d}_enabled"]`);
      if (enabled.checked && !has) {
        const hidden = document.createElement("input");
        hidden.type = "hidden";
        hidden.name = `d${d}_enabled`;
        hidden.value = "on";
        card.appendChild(hidden);
      }
    });
  });

  render();
})();
</script>

<style>
  .form-grid{display:grid;grid-template-columns:repeat(3,minmax(220px,1fr));gap:16px}
  .form-row label{margin-bottom:4px;color:#333;font-weight:500}
  .tools{display:flex;gap:8px;align-items:center}
  .week-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(260px,1fr));gap:12px}
  .day-card{border:1px solid #e5e7eb;border-radius:8px;padding:12px;background:#fafafa}
  .day-head{display:flex;align-items:center;justify-content:space-between;margin-bottom:8px}
  .day-card .row{display:grid;grid-template-columns:1fr 1fr;gap:8px}
  .day-card .col{display:flex;flex-direction:column}
  .chk{display:flex;align-items:center;gap:6px;font-size:.9rem;color:#444}
  .form-actions{display:flex;gap:12px;margin-top:8px}
  .btn{padding:10px 16px;border:none;border-radius:6px;background-color:#667eea;color:#fff;cursor:pointer}
  .btn.secondary{background-color:#a0aec0}
  .muted{color:#6b7280}
  @media (max-width:860px){.form-grid{grid-template-columns:1fr}}
</style>
