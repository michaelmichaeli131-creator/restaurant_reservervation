<% layout("_layout", it) %>
<main class="container">
  <header class="page-header">
    <h1>הגדרת שעות פתיחה — <%= it.restaurant.name %></h1>
    <p class="muted"><%= it.restaurant.city %> · <%= it.restaurant.address %></p>
  </header>

  <section class="card">
    <form id="hours-form" class="form-grid" novalidate>
      <input type="hidden" id="rid" value="<%= it.restaurant.id %>"/>

      <div class="form-row">
        <label for="capacity">קיבולת מקסימלית בו־זמנית</label>
        <input id="capacity" name="capacity" type="number" min="1" step="1"
               value="<%= it.restaurant.capacity ?? 20 %>" />
      </div>

      <div class="form-row">
        <label for="slot">גריד סלוטים (דקות)</label>
        <input id="slot" name="slot" type="number" min="5" step="5"
               value="<%= it.restaurant.slot ?? 15 %>" />
      </div>

      <hr/>

      <h3 style="margin:0 0 .5rem">שעות פתיחה שבועיות (24h)</h3>
      <p class="muted" style="margin-top:0">
        השתמש/י בפורמט 24 שעות. כדי לסגור יום מסומן, סמן/י "סגור".
      </p>

      <table class="table compact" style="width:100%">
        <thead>
          <tr>
            <th>יום</th>
            <th>פתיחה</th>
            <th>סגירה</th>
            <th>סגור</th>
          </tr>
        </thead>
        <tbody>
          <% 
            const dayNames = ["א׳","ב׳","ג׳","ד׳","ה׳","ו׳","ש׳"];
            // hours עשוי להיות null/מחרוזת/אובייקט — ננרמל לתצוגה בלבד
            function pick(v, d){ return (v === undefined || v === null) ? d : v; }
            let hours = it.restaurant.hours || {};
            // אם נשמר כמחרוזת JSON (מקרים ישנים) — ננסה לפרסר
            if (typeof hours === "string") {
              try { hours = JSON.parse(hours); } catch { hours = {}; }
            }
          %>
          <% for (let d = 0; d < 7; d++) { 
               const row = hours?.[d] ?? null;
               const isClosed = row == null;
               const openVal = !isClosed ? row.open : "";
               const closeVal = !isClosed ? row.close : "";
          %>
          <tr data-day="<%= d %>">
            <td><strong><%= dayNames[d] %></strong></td>
            <td>
              <input type="time" inputmode="numeric" pattern="[0-2][0-9]:[0-5][0-9]" step="60"
                     class="open"
                     value="<%= openVal %>" <%= isClosed ? "disabled" : "" %> />
            </td>
            <td>
              <input type="time" inputmode="numeric" pattern="[0-2][0-9]:[0-5][0-9]" step="60"
                     class="close"
                     value="<%= closeVal %>" <%= isClosed ? "disabled" : "" %> />
            </td>
            <td style="text-align:center">
              <input type="checkbox" class="closed" <%= isClosed ? "checked" : "" %> />
            </td>
          </tr>
          <% } %>
        </tbody>
      </table>

      <div class="form-actions">
        <button type="submit" class="btn primary">שמירה</button>
        <a class="btn" href="/owner">ביטול</a>
      </div>
    </form>
  </section>
</main>

<script>
(function(){
  /*** FIX: נרמול זמן ל־HH:mm (כולל AM/PM אם דפדפן סיפק כך) ***/
  function toHHmm24(input) {
    if (!input) return "";
    const s = String(input).trim();

    // Already looks like 24h "HH:mm"
    const m24 = /^([01]?\d|2[0-3]):([0-5]\d)$/.exec(s);
    if (m24) {
      const h = String(m24[1]).padStart(2, "0");
      const m = String(m24[2]).padStart(2, "0");
      return `${h}:${m}`;
    }

    // AM/PM variants: "h:mm AM" or "hh:mmAM" or "h AM"
    const m12 = /^(\d{1,2})(?::([0-5]\d))?\s*([AaPp][Mm])$/.exec(s);
    if (m12) {
      let h = parseInt(m12[1], 10);
      const m = String(m12[2] ?? "00").padStart(2, "0");
      const ampm = m12[3].toUpperCase();
      if (ampm === "AM") h = (h % 12);
      else if (ampm === "PM") h = (h % 12) + 12;
      return String(h).padStart(2, "0") + ":" + m;
    }

    // Edge: "h" or "hh" -> treat as HH:00
    const mh = /^([01]?\d|2[0-3])$/.exec(s);
    if (mh) return String(mh[1]).padStart(2, "0") + ":00";

    // As last resort, empty
    return "";
  }

  /*** FIX: בניית hours map 0..6 → {open,close}|null ***/
  function collectWeeklyHours(tbody) {
    const rows = tbody.querySelectorAll("tr[data-day]");
    const out = {};
    rows.forEach(tr => {
      const d = parseInt(tr.getAttribute("data-day"), 10);
      const closed = tr.querySelector(".closed").checked;
      if (closed) {
        out[d] = null;
        return;
      }
      const openRaw = tr.querySelector(".open").value;
      const closeRaw = tr.querySelector(".close").value;
      const open = toHHmm24(openRaw);
      const close = toHHmm24(closeRaw);
      if (!open || !close) {
        out[d] = null; // אם חסר ערך — נחשב כסגור (נמנע מלשמור מבנה שגוי)
      } else {
        out[d] = { open, close };
      }
    });
    return out;
  }

  /*** FIX: סנכרון מצב 'סגור' ↔ הפעלת/השבתת שדות זמן ***/
  function wireClosedToggles(tbody) {
    tbody.addEventListener("change", (ev) => {
      const el = ev.target;
      if (!(el instanceof HTMLInputElement)) return;
      if (!el.classList.contains("closed")) return;
      const tr = el.closest("tr");
      const disabled = el.checked;
      tr.querySelectorAll("input.open, input.close").forEach(inp => {
        inp.disabled = disabled;
        if (disabled) inp.value = "";
      });
    });
  }

  const form = document.getElementById("hours-form");
  const tbody = form.querySelector("tbody");
  wireClosedToggles(tbody);

  form.addEventListener("submit", async (ev) => {
    ev.preventDefault();

    const rid = document.getElementById("rid").value;
    const capacity = Math.max(1, parseInt(document.getElementById("capacity").value || "1", 10));
    const slot = Math.max(5, parseInt(document.getElementById("slot").value || "15", 10));
    const hours = collectWeeklyHours(tbody);

    // בקשה בפורמט JSON — תואם למה שהשרת מצפה לפרסר
    const payload = { capacity, slot, hours };

    try {
      const res = await fetch(`/restaurants/${encodeURIComponent(rid)}/hours`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        const text = await res.text().catch(()=>"");
        alert("שמירה נכשלה: " + (text || res.status));
        return;
      }

      // אופציונלי: חיווי הצלחה וניווט
      alert("שעות נשמרו בהצלחה");
      location.assign(`/restaurants/${encodeURIComponent(rid)}`);
    } catch (e) {
      console.error(e);
      alert("שמירה נכשלה (רשת/שרת).");
    }
  });
})();
</script>

<style>
/* שמירה על ה-UI הקיים שלך; תוספות מינוריות למרווחיות */
.table.compact th, .table.compact td { padding: .4rem .5rem; }
.form-actions { display:flex; gap:.5rem; align-items:center; }
</style>
