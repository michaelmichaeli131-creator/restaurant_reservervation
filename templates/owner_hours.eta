<% layout("_layout", it) %>
<main class="container">
  <header class="page-header">
    <h1>הגדרת שעות פתיחה — <%= it.restaurant.name %></h1>
    <p class="muted"><%= it.restaurant.city %> · <%= it.restaurant.address %></p>
    <% if (it.saved) { %>
      <div class="alert ok" role="alert">השעות נשמרו בהצלחה.</div>
    <% } %>
  </header>

  <section class="card">
    <form id="hours-form" class="form-grid" novalidate>
      <input type="hidden" id="rid" value="<%= it.restaurant.id %>"/>

      <div class="form-row">
        <label for="capacity">קיבולת מקסימלית בו־זמנית</label>
        <input id="capacity" type="number" min="1" step="1" value="<%= it.restaurant.capacity %>"/>
      </div>

      <div class="form-row">
        <label for="slotIntervalMinutes">גריד סלוטים (דקות)</label>
        <input id="slotIntervalMinutes" type="number" min="5" max="180" step="5" value="<%= it.restaurant.slotIntervalMinutes %>"/>
      </div>

      <h3>שעות לכל יום</h3>
      <table class="table">
        <thead>
          <tr><th>יום</th><th>סגור</th><th>מ־</th><th>עד</th></tr>
        </thead>
        <tbody>
          <% for (let d = 0; d < 7; d++) {
               const day = it.restaurant.weeklySchedule?.[d];
               const isClosed = day === null;
               const first = Array.isArray(day) && day.length ? day[0] : { open: "09:00", close: "22:00" };
          %>
          <tr data-day="<%= d %>">
            <td><%= it.dayLabels[d] %></td>
            <td>
              <input type="checkbox" class="closed" <%= isClosed ? "checked" : "" %> />
            </td>
            <td>
              <input type="text" class="open" value="<%= isClosed ? "" : first.open %>" placeholder="09:00" pattern="\\d{2}:\\d{2}" />
            </td>
            <td>
              <input type="text" class="close" value="<%= isClosed ? "" : first.close %>" placeholder="22:00" pattern="\\d{2}:\\d{2}" />
            </td>
          </tr>
          <% } %>
        </tbody>
      </table>

      <div class="form-row">
        <button type="submit" class="btn primary">שמירה</button>
      </div>
    </form>
  </section>
</main>

<script>
(function(){
  function enableRow(tr, yes) {
    tr.querySelectorAll("input.open, input.close").forEach(inp => {
      inp.disabled = !yes;
      if (yes && !inp.value) {
        if (inp.classList.contains("open")) inp.value = "09:00";
        if (inp.classList.contains("close")) inp.value = "22:00";
      }
    });
  }

  function toHHmm24(input) {
    if (!input) return "";
    const s = String(input).trim();
    const m24 = /^([01]?\d|2[0-3]):([0-5]\d)$/.exec(s);
    if (m24) return m24[1].padStart(2,"0")+":"+m24[2];
    const m12 = /^(\d{1,2})(?::([0-5]\d))?\s*([AaPp][Mm])$/.exec(s);
    if (m12) {
      let h = parseInt(m12[1],10);
      const m = (m12[2]??"00").padStart(2,"0");
      const ampm = m12[3].toUpperCase();
      if (ampm === "AM") h = (h % 12);
      else h = (h % 12) + 12;
      return String(h).padStart(2,"0")+":"+m;
    }
    const mh = /^([01]?\d|2[0-3])$/.exec(s);
    if (mh) return String(mh[1]).padStart(2,"0")+":00";
    return "";
  }

  function collectWeeklyHours(tbody) {
    const rows = tbody.querySelectorAll("tr[data-day]");
    const out = {};
    rows.forEach(tr => {
      const d = parseInt(tr.getAttribute("data-day"), 10);
      const isClosed = tr.querySelector(".closed").checked;
      if (isClosed) {
        out[d] = null;
        return;
      }
      const o = toHHmm24(tr.querySelector(".open").value);
      const c = toHHmm24(tr.querySelector(".close").value);
      if (o && c) {
        // שולחים בפורמט "שטוח" — השרת תומך גם בו
        out[d] = { open: o, close: c };
      } else {
        out[d] = null;
      }
    });
    return out;
  }

  const form = document.getElementById("hours-form");
  const tbody = form.querySelector("tbody");

  tbody.querySelectorAll("tr[data-day]").forEach(tr => {
    const closed = tr.querySelector(".closed");
    const openInp = tr.querySelector(".open");
    const closeInp = tr.querySelector(".close");

    const ensureOpen = () => {
      if (closed.checked) {
        closed.checked = false;
        enableRow(tr, true);
        if (!openInp.value) openInp.value = "09:00";
        if (!closeInp.value) closeInp.value = "22:00";
      }
    };

    openInp.addEventListener("focus", ensureOpen);
    closeInp.addEventListener("focus", ensureOpen);

    closed.addEventListener("change", () => {
      enableRow(tr, !closed.checked);
      if (closed.checked) {
        openInp.value = "";
        closeInp.value = "";
      } else {
        if (!openInp.value) openInp.value = "09:00";
        if (!closeInp.value) closeInp.value = "22:00";
      }
    });
  });

  form.addEventListener("submit", async (ev) => {
    ev.preventDefault();

    const rid = document.getElementById("rid").value;
    const capacity = Math.max(1, parseInt(document.getElementById("capacity").value || "1", 10));
    const slotIntervalMinutes = Math.max(5, parseInt(document.getElementById("slotIntervalMinutes").value || "15", 10));
    const weeklySchedule = collectWeeklyHours(tbody);

    console.log("[hours-form] submitting:", { rid, capacity, slotIntervalMinutes, weeklySchedule });

    try {
      const res = await fetch(`/owner/restaurants/${encodeURIComponent(rid)}/hours`, {
        method: "POST",
        headers: { "Content-Type": "application/json", "Accept":"application/json" },
        body: JSON.stringify({ capacity, slotIntervalMinutes, weeklySchedule }),
      });

      if (!res.ok) {
        const txt = await res.text().catch(()=> "");
        console.error("[hours-form] failed:", res.status, txt);
        alert("שמירה נכשלה: " + res.status + "\n" + txt);
        return;
      }

      const contentType = res.headers.get("content-type") || "";
      if (contentType.includes("application/json")) {
        try {
          const data = await res.json();
          console.log("[hours-form] success:", data);
          if (data.ok) {
            alert("שעות נשמרו בהצלחה!");
            location.assign(`/owner/restaurants/${encodeURIComponent(rid)}/hours?saved=1`);
          } else {
            alert("שמירה נכשלה: " + (data.error || "שגיאה לא ידועה"));
          }
        } catch (e) {
          console.error("[hours-form] parse error:", e);
          alert("שגיאה בקריאת תגובת השרת");
        }
      } else {
        console.log("[hours-form] non-JSON response, assuming success");
        alert("שעות נשמרו בהצלחה!");
        location.assign(`/owner/restaurants/${encodeURIComponent(rid)}/hours?saved=1`);
      }
    } catch (e) {
      console.error("[hours-form] network error:", e);
      alert("שמירה נכשלה (רשת/שרת).");
    }
  });
})();
</script>
